import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id "idea"
    id "java"
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "[6.0,6.2)"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
    id "org.spongepowered.mixin" version "0.7.+"
}

// Allows local configuration.
// Edit the generated `dev.gradle` file
//
// ext {
//     mappings_channel = "parchment"
//     mappings_version = "2023.09.03-1.20.1"
//     minify_resources = false;
//     use_advanced_class_redefinition = true
// }
// Properties that can be configured are:
// "mappings_channel", "mappings_version" (suggested "parchment", "2023.09.03-1.20.1" respectivly)
// "minify_resources" (suggested `false` for faster build times)
// "use_advanced_class_redefinition" for the magic Jetbrains JDK hotswaps
file("./dev.gradle").createNewFile()
apply {
    from("dev.gradle")
}

final String mappingsChannel = project.findProperty("mappings_channel") as String ?: "official"
final String mappingsVersion = project.findProperty("mappings_version") as String ?: minecraftVersion
final boolean minifyResources = project.findProperty("minify_resources") as Boolean ?: true
final boolean useAdvancedClassRedef = project.findProperty("use_advanced_class_redefinition") as Boolean ?: false

base {
    archivesName.set("$modName-$minecraftVersion")
    group = "mod.traister101" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    version = modVersion
}

java {
    // Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"
println "Using mappings $mappingsChannel / $mappingsVersion with version $modVersion"

// Include resources generated by data generators
sourceSets {
    main {
        resources {
            srcDir "src/generated/resources"
        }
    }
    datagen {}
}

configurations {
    datagenCompileClasspath.extendsFrom compileClasspath
    datagenRuntimeClasspath.extendsFrom runtimeClasspath
}

mixin {
    add sourceSets.main, "sacks-n-such.refmap.json"
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion

    runs {
        configureEach {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            // Mixin is stupid
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "$projectDir/build/createSrgToMcp/output.srg"

            if (useAdvancedClassRedef) {
                jvmArg("-XX:+AllowEnhancedClassRedefinition")
            }

            arg "-mixin.config=sacks-n-such.mixins.json"

            mods {
                "$modID" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory file("run/client")

            jvmArgs "-ea", "-Xmx4G", "-Xms4G"

            property "forge.enabledGameTestNamespaces", modID
        }

        server {
            workingDirectory file("run/server")

            args "-nogui"
        }

        data {
            workingDirectory file("run/datagen")

            ideaModule "${project.getName().replace(' ', '_')}.datagen"

            mods {
                "$modID" {
                    source sourceSets.datagen
                }
            }

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args "--mod", modID, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/"), "--existing-mod", "tfc"
        }
    }
}

repositories {
    maven {
        name "Curse maven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name "BlameJared maven"
        url "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
            includeGroup "vazkii.patchouli"
        }
    }
    maven {
        name "Illusive Soulworks maven"
        url "https://maven.theillusivec4.top/"
        content {
            includeGroup "top.theillusivec4.curios"
        }
    }
    // Mirror for JEI and patchouli
    maven {
        name "Mod maven"
        url "https://modmaven.k-4u.nl"
        content {
            includeGroup "mezz.jei"
            includeGroup "vazkii.patchouli"
        }
    }

    mavenLocal()

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal  we can"t do anything about these so make it shut up
    minecraft("net.minecraftforge:forge:$minecraftVersion-$forgeVersion")

    datagenImplementation sourceSets.main.output

    // Lombok because yes
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // TFC
    implementation fg.deobf("curse.maven:terrafirmacraft-302973:$tfcFileID")

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
    }

    // https://github.com/Traister101/ExtendedSlotCapacity
    implementation jarJar(fg.deobf("mod.traister101:Extended-Slot-Capacity-1.20.1:$extendedSlotCapacityVersion")) {
        jarJar.ranged(it as Dependency, "[$extendedSlotCapacityVersion,)")
    }

    // Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:$minecraftVersion-$patchouliVersion-FORGE")

    // Jade
    runtimeOnly fg.deobf("curse.maven:jade-324717:$jadeFileID")

    // JEI
    runtimeOnly fg.deobf("mezz.jei:jei-$minecraftVersion-forge:$jeiVersion")

    // Curios
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:$curiosVersion+$minecraftVersion:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:$curiosVersion+$minecraftVersion")
}

jar {
    from sourceSets.datagen.output
    manifest {
        attributes(["Specification-Title"     : modName,
                    "Specification-Vendor"    : "traister101",
                    "Specification-Version"   : project.jar.archiveVersion,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "traister101",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
    finalizedBy("reobfJar")
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        // Add directory exlusions
        final def exludes = ["run",
                             ".gradle",
                             "build",
                             ".idea",
                             "gradle",
                             "src/generated/resources/.cache",
                             "resources/venv",
                             "resources/.idea"]
        excludeDirs.addAll(exludes.stream().map { file it }.toList())
    }
}

processResources {
    if (minifyResources) {
        doLast {
            final var jsonMinifyStart = System.currentTimeMillis()
            var jsonMinified = 0
            var jsonBytesBefore = 0
            var jsonBytesAfter = 0

            fileTree(dir: outputs.files.asPath, include: "**/*.json").forEach { final File file ->
                jsonMinified++
                jsonBytesBefore += file.length()
                try {
                    file.write(JsonOutput.toJson(new JsonSlurper().parse(file)))
                } catch (e) {
                    println("JSON Error in ${file.path}")
                    throw e
                }

                jsonBytesAfter += file.length()
            }
            println("Minified $jsonMinified json files. Reduced ${jsonBytesBefore / 1024} kB to ${(jsonBytesAfter / 1024)} kB. Took ${System.currentTimeMillis() - jsonMinifyStart} ms")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
    options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
}